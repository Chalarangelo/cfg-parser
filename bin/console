#!/usr/bin/env node
import repl from 'node:repl';
import Tokenizer from '#src/tokenizer.js';
import CFG from '#src/cfg.js';
import Rule from '#src/rule.js';
import Sym from '#src/sym.js';
import EarleyParser from '#src/earleyParser.js';

// Start the REPL server
const replServer = repl.start();
// Set up a history file for the REPL
replServer.setupHistory('repl.log', () => {});

// Make the classes available to the REPL
replServer.context.Tokenizer = Tokenizer;
replServer.context.CFG = CFG;
replServer.context.Rule = Rule;
replServer.context.Sym = Sym;

Sym.define(
  'Expression',
  'Operator',
  'Term',
  'ParenthesesOpen',
  'ParenthesesClose'
);
const rules = [
  new Rule(Sym.Expression, [Sym.Term]),
  new Rule(Sym.Expression, [Sym.Expression, Sym.Operator, Sym.Expression]),
  new Rule(Sym.Operator, [/[\+\-\*\/]/]),
  new Rule(Sym.Term, [/\d+/]),
  new Rule(Sym.Term, [
    Sym.ParenthesesOpen,
    Sym.Expression,
    Sym.ParenthesesClose,
  ]),
  new Rule(Sym.ParenthesesOpen, ['(']),
  new Rule(Sym.ParenthesesClose, [')']),
];
const cfg = new CFG(rules);
const tokenizer = new Tokenizer(cfg);
const parser = new EarleyParser(cfg, Sym.E);
// tokenizer.tokenize('1+2+3');

replServer.context.tokenize = input => {
  return tokenizer.tokenize(input);
};

replServer.context.parse = input => {
  return parser.parse(input);
};
